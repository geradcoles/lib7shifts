#!/usr/bin/env python3
"""
usage: 7shifts [options] <command> [<args>...]

A tool for experimenting with the 7shifts API, demonstrating some of the
capabilities of this library. Read-based tasks are supported, such as get/list,
but all operations to alter data must be achieved in Python code, directly
using the 7shifts library.

options:
    -h --help         Show this screen
    -v --version      Show version information
    -d --debug        Enable debug logging (low-level)

commands:
    company     get/list company data from the API
    department  get/list department data from the API
    location    get/list location data from the API
    event       get/list schedule event data from API
    receipt     get/list sales receipt data from the API
    role        get/list role data from the API
    shift       get/list shift data from the API
    time_punch  get/list time punch data from the API
    user        get/list user data from the API
    wage        get/list user wage data from the API
    daily_sales_labor  get daily sales and labour data from the API
    whoami      retrieve identity information for the current access token
    help        show this screen

You will also need to provide a 7shifts access token with an
environment variable called ACCESS_TOKEN_7SHIFTS for authenticaton
with the 7shifts API. See the following for details of how to create
an access token:

https://developers.7shifts.com/reference/authentication#access-tokens

"""
import sys
import logging
import importlib
from docopt import docopt

VALID_CMDS = (
    'company', 'department', 'location', 'event', 'role', 'shift',
    'receipt', 'time_punch', 'user', 'wage', 'daily_sales_labor', 'whoami')


def main(**args):
    """Call the `main` method in the appropriate :mod:`lib7shifts.cmd`
    module based on the subcommand specified by the user."""
    cmd = args['<command>']
    argv = [cmd] + args['<args>']
    if cmd in VALID_CMDS:
        module = importlib.import_module('lib7shifts.cmd.{}'.format(cmd))
        module.main(**docopt(module.__doc__, argv=argv))
    elif cmd == 'help':
        print(__doc__)
    else:
        print("command {} is not valid".format(cmd))
    return 0


if __name__ == '__main__':
    ARGS = docopt(__doc__, version='7shifts2sqlite', options_first=True)
    logging.basicConfig()
    if ARGS['--debug'] or \
            '-d' in ARGS['<args>'] or '--debug' in ARGS['<args>']:
        logging.getLogger().setLevel(logging.DEBUG)
        logging.getLogger('lib7shifts').setLevel(logging.DEBUG)
    else:
        logging.getLogger('lib7shifts').setLevel(logging.INFO)
    logging.getLogger('lib7shifts.7shifts').debug(
        'started with args: %s', ARGS)
    sys.exit(main(**ARGS))
