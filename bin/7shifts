#!/usr/bin/env python3
"""
usage: 7shifts [options] <command> [<args>...]

A tool for reading data from the 7shifts API, demonstrating some of the
capabilities of this library. Read-based tasks are supported, such as get/list,
but all operations to alter data must be achieved in Python code, directly
using the 7shifts library. The 7shifts sync command is used for migrating
7shifts data into a data warehouse (SQL database). All commands support their
own help with the -h argument.

options (must preceed <command>):

  -h --help             Show this screen
  -v --version          Show version information
  -d --debug            Enable module-level debug logging
  --debug-api           Enable API-level debug logging (http requests)
  -l --log=FILE         Specify an output log file (instead of stderr),
                        relative to <workdir> if not absolute
  --append-log          Append instead of replacing logfile

commands:
    company     get/list company data from the API
    daily_sales_labor  get daily sales and labour data from the API
    department  get/list department data from the API
    event       get/list schedule event data from API
    location    get/list location data from the API
    receipt     get/list sales receipt data from the API
    role        get/list role data from the API
    shift       get/list shift data from the API
    sync        synchronize data from 7shifts into a database
    time_punch  get/list time punch data from the API
    user        get/list user data from the API
    wage        get/list user wage data from the API
    assignments  list user location/department/role assignments from the API
    whoami      retrieve identity information for the current access token
    help        show this screen

You will also need to provide a 7shifts access token with an
environment variable called ACCESS_TOKEN_7SHIFTS for authenticaton
with the 7shifts API. See the following for details of how to create
an access token:

https://developers.7shifts.com/reference/authentication#access-tokens

"""
import sys
import logging
import importlib
from lib7shifts.exceptions import APIError
from docopt import docopt

VALID_CMDS = (
    "company",
    "department",
    "location",
    "event",
    "role",
    "shift",
    "sync",
    "receipt",
    "time_punch",
    "user",
    "wage",
    "daily_sales_labor",
    "whoami",
    "assignments",
)


def main(**args):
    """Call the `main` method in the appropriate :mod:`lib7shifts.cmd`
    module based on the subcommand specified by the user."""
    cmd = args["<command>"]
    argv = [cmd] + args["<args>"]
    if cmd in VALID_CMDS:
        module = importlib.import_module("lib7shifts.cmd.{}".format(cmd))
        try:
            module.main(**docopt(module.__doc__, argv=argv))
        except APIError as error:
            logging.getLogger("lib7shifts.cli.7shifts").fatal(
                "Encountered an API error:\n%s", error.pretty_response()
            )
            return 99
    elif cmd == "help":
        print(__doc__)
    else:
        print("command {} is not valid".format(cmd))
        return 1
    return 0


if __name__ == "__main__":
    ARGS = docopt(__doc__, version="20230601", options_first=True)
    LOG_FORMAT = "%(asctime)s %(name)s %(levelname)s %(message)s"
    LOG_DATE_FORMAT = "%Y-%m-%d %I:%M:%S"
    LOG_MODE = "w"
    if ARGS.get("--append-log"):
        LOG_MODE = "a+"
    PACKAGE_LOG_LEVEL = logging.INFO
    if ARGS.get("--debug"):
        PACKAGE_LOG_LEVEL = logging.DEBUG
    logging.basicConfig(
        filename=ARGS.get("--log", None),
        filemode=LOG_MODE,
        level=logging.INFO,
        format=LOG_FORMAT,
        datefmt=LOG_DATE_FORMAT,
    )
    if ARGS.get("--debug-api"):
        logging.getLogger("urllib3").setLevel(logging.DEBUG)
    logging.getLogger("lib7shifts").setLevel(PACKAGE_LOG_LEVEL)
    logging.getLogger("lib7shifts.cli.7shifts").debug("started with args: %s", ARGS)
    sys.exit(main(**ARGS))
