#!/usr/bin/env python3
"""Read punch data from 7shifts and put it into a CSV format suitable for Futrli.

Usage:
  7shifts2futrli hours [options] <sqlite_db>
  7shifts2futrli labour [options] <sqlite_db>

Options:
  -h --help         Show this screen
  -v --version      Show version information
  -d --debug        Enable debug logging (low-level)
  --start=YYYY-MM-DD  Specify the start date for reading punches [default: 2019-01-01]
  --end=YYYY-MM-DD  Specify the end date for reading punches from 7shifts (exclusive)
  --approved=N      Retrieve approved time punches [default: 1]
  --unapproved=N    Retrieve unapproved punches in results [default: 0]
  --output=FILE     Specify a file name for output [default: sys.stdout]

Dates should be of the form 2019-06-04.

You will also need to provide the 7shifts API key with an environment
variable called API_KEY_7SHIFTS.

"""
from docopt import docopt
import sys, os, os.path, time
import csv, datetime
import logging
import lib7shifts
from lib7shifts.cmd.util import SQLite3DB

OUTPUT_COLS = ('Date', 'Parent', 'Child', 'Result')
QUERY_HOURS = """SELECT
  date(time_punches.clocked_in, 'unixepoch', 'localtime') AS Date,
  ('Daily Hours - ' || departments.name || ' - ' || roles.name) AS Parent,
  (users.firstname || ' ' || users.lastname) as Child,
  sum(round((time_punches.clocked_out - time_punches.clocked_in) / 3600, 2)) as Result
  FROM time_punches
  LEFT JOIN users ON users.id = time_punches.user_id
  LEFT JOIN roles ON roles.id = time_punches.role_id
  LEFT JOIN departments ON departments.id = time_punches.department_id
  WHERE
    time_punches.clocked_in >= :start AND
    time_punches.clocked_in < :end AND
    (time_punches.approved = :approved OR time_punches.approved = :unapproved) AND
    users.firstname IS NOT NULL AND
    departments.name IS NOT NULL AND
    roles.name IS NOT NULL
  GROUP BY Date, Parent, Child
"""

QUERY_LABOUR = """SELECT
  date(time_punches.clocked_in, 'unixepoch', 'localtime') AS Date,
  ('Daily Labour - ' || departments.name || ' - ' || roles.name) AS Parent,
  (users.firstname || ' ' || users.lastname) as Child,
  round(sum(((time_punches.clocked_out - time_punches.clocked_in) / 3600) *
    wages.wage_cents / 100), 2) as Result
  FROM time_punches
  LEFT JOIN users ON users.id = time_punches.user_id
  LEFT JOIN roles ON roles.id = time_punches.role_id
  LEFT JOIN wages ON
    wages.user_id = time_punches.user_id AND
    wages.role_id = time_punches.role_id AND
    wages.category = 'current'
  LEFT JOIN departments ON departments.id = time_punches.department_id
  WHERE
    time_punches.clocked_in >= :start AND
    time_punches.clocked_in < :end AND
    (time_punches.approved = :approved OR time_punches.approved = :unapproved) AND
    users.firstname IS NOT NULL AND
    departments.name IS NOT NULL AND
    roles.name IS NOT NULL
  GROUP BY Date, Parent, Child
"""

def parse_query_args(**kwargs):
  args = {}
  if kwargs.get('--start', None) is None:
    args['start'] = 0 # 0 = beginning of time
  else:
    args['start'] = date_to_ts(kwargs.get('--start'))
  if kwargs.get('--end', None) is None:
    args['end'] = time.time()
  else:
    args['end'] = date_to_ts(kwargs.get('--end'))
  if int(kwargs.get('--unapproved', 0)):
    args['unapproved'] = 0
  else:
    args['unapproved'] = 1
  if int(kwargs.get('--approved', 1)):
    args['approved'] = 1
  else:
    args['approved'] = 0
  return args

def get_hours(db, **kwargs):
  """
  Pass kwargs:

  - start: unixepoch representation of time, 0 or None for all time
  - end: unixepoch representation of end time, None for all time
  - approved: 0 for unapproved, 1 for approved punches

  """
  return db.cursor.execute(QUERY_HOURS, kwargs)

def get_labour(db, **kwargs):
  """
  Pass kwargs:

  - start: unixepoch representation of time, 0 or None for all time
  - end: unixepoch representation of end time, None for all time
  - approved: 0 for unapproved, 1 for approved punches

  """
  return db.cursor.execute(QUERY_LABOUR, kwargs)

def dump_results(results, output_handle):
  outcsv = csv.writer(output_handle, dialect='excel')
  outcsv.writerow(OUTPUT_COLS)
  outcsv.writerows(results.fetchall())

def get_output(args):
  output = args.get('--output', sys.stdout)
  if output.lower() in ('sys.stdout', 'stdout'):
    return sys.stdout
  elif output.lower() in ('sys.stderr', 'stderr'):
    return sys.stderr
  return open(os.path.realpath(os.path.expanduser(output)), 'w')

def date_to_ts(date):
  return time.mktime(datetime.datetime.strptime(date, '%Y-%m-%d').timetuple())

def main(**args):
  logging.basicConfig()
  if args.get('--debug', False):
    print(args, file=sys.stderr)
    logging.getLogger().setLevel(logging.DEBUG)
  else:
    logging.getLogger('lib7shifts').setLevel(logging.INFO)
  q_args = parse_query_args(**args)
  if args.get('--debug', False):
    print(q_args, file=sys.stderr)
  db = SQLite3DB(args.get('<sqlite_db>'))
  results = None
  if args.get('hours', None):
    results = get_hours(db, **q_args)
  elif args.get('labour', None):
    results = get_labour(db, **q_args)
  if results:
    output = get_output(args)
    dump_results(results, output)
    if not (output in (sys.stdout, sys.stderr)):
      output.close()
  return 0

if __name__ == '__main__':
  args = docopt(__doc__, version='7shifts2futrli 0.1')
  sys.exit(main(**args))
